/*!
 * (C) BKKR Framework https://bkkr-team.github.io/bkkr-docs/ - MIT License
 */
const o=o=>{let c=[],u=!0;const n=o?o.shadowRoot:document,r=o||document.body,d=o=>{c.forEach((o=>o.classList.remove(t))),o.forEach((o=>o.classList.add(t))),c=o},f=()=>{u=!1,d([])},w=o=>{u=s.includes(o.key),u||d([])},a=o=>{if(u&&o.composedPath){const t=o.composedPath().filter((o=>!!o.classList&&o.classList.contains(e)));d(t)}},i=()=>{n.activeElement===r&&d([])};return n.addEventListener("keydown",w),n.addEventListener("focusin",a),n.addEventListener("focusout",i),n.addEventListener("touchstart",f),n.addEventListener("mousedown",f),{destroy:()=>{n.removeEventListener("keydown",w),n.removeEventListener("focusin",a),n.removeEventListener("focusout",i),n.removeEventListener("touchstart",f),n.removeEventListener("mousedown",f)},setFocus:d}},t="state-focused",e="state-focusable",s=["Tab","ArrowDown","Space","Escape"," ","Shift","Enter","ArrowLeft","ArrowRight","ArrowUp","Home","End"];export{o as handleFocus}