@use "../../scss/mixins";
@use "../../scss/functions";
@use "../../scss/globals";

// stylelint-disable selector-no-qualifying-type

// Item
// --------------------------------------------------

@use "item.vars" as *;

.item {
  /**
   * @prop --background: Background of the item
   * @prop --background-activated: Background of the item when pressed. Note: setting this will interfere with the Material Design ripple.
   * @prop --background-activated-opacity: Opacity of the item background when pressed
   * @prop --background-focused: Background of the item when focused with the tab key
   * @prop --background-focused-opacity: Opacity of the item background when focused with the tab key
   * @prop --background-hover: Background of the item on hover
   * @prop --background-hover-opacity: Opacity of the background of the item on hover
   *
   * @prop --border-color: Color of the item border
   * @prop --border-radius: Radius of the item border
   * @prop --border-style: Style of the item border
   * @prop --border-width: Width of the item border
   *
   * @prop --color: Color of the item
   * @prop --color-activated: Color of the item when pressed
   * @prop --color-focused: Color of the item when focused with the tab key
   * @prop --color-hover: Color of the item on hover
   *
   * @prop --detail-icon-color: Color of the item detail icon
   * @prop --detail-icon-opacity: Opacity of the item detail icon
   * @prop --detail-icon-font-size: Font size of the item detail icon
   *
   * @prop --inner-border-width: Width of the item inner border
   * @prop --inner-box-shadow: Box shadow of the item inner
   * @prop --inner-padding-top: Top padding of the item inner
   * @prop --inner-padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
   * @prop --inner-padding-bottom: Bottom padding of the item inner
   * @prop --inner-padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
   *
   * @prop --min-height: Minimum height of the item
   *
   * @prop --padding-bottom: Bottom padding of the item
   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
   * @prop --padding-top: Top padding of the item
   *
   * @prop --transition: Transition of the item
   *
   * @prop --ripple-color: Color of the item ripple effect
   *
   * @prop --highlight-height: The height of the highlight on the item
   * @prop --highlight-color-focused: The color of the highlight on the item when focused
   * @prop --highlight-color-valid: The color of the highlight on the item when valid
   * @prop --highlight-color-invalid: The color of the highlight on the item when invalid
   */
  --border-radius: 0;
  --border-width: 0;
  --border-style: solid;
  --padding-top: 0;
  --padding-bottom: 0;
  --padding-end: 0;
  --padding-start: 0;
  --inner-border-width: 0;
  --inner-padding-top: 0;
  --inner-padding-bottom: 0;
  --inner-padding-start: 0;
  --inner-padding-end: 0;
  --inner-box-shadow: none;
  --show-full-highlight: 0;
  --show-inset-highlight: 0;
  --detail-icon-color: initial;
  --detail-icon-font-size: 20px;
  --detail-icon-opacity: .25;
  --color-activated: var(--color);
  --color-focused: var(--color);
  --color-hover: var(--color);
  --min-height: #{$min-height};
  --transition: background-color 200ms linear, opacity 200ms linear;
  --padding-start: #{$padding-start};
  --inner-padding-end: #{$padding-end / 2};
  --inner-border-width: #{0 0 $border-bottom-width 0};
  --background: #{$background};
  --background-activated: #000;
  --background-focused: #000;
  --background-hover: currentColor;
  --background-activated-opacity: .12;
  --background-focused-opacity: .15;
  --background-hover-opacity: .04;
  --border-color: #{$border-bottom-color};
  --color: #{$color};
  --highlight-height: #{$highlight-height};
  --highlight-color-focused: #{$input-highlight-color};
  --highlight-color-valid: #{$input-highlight-color-valid};
  --highlight-color-invalid: #{$input-highlight-color-invalid};

  @include mixins.text-font-smoothing();

  display: block;

  position: relative;

  align-items: center;
  justify-content: space-between;

  outline: none;

  color: var(--color);

  font-family: globals.$font-family-base;
  font-size: $font-size;

  text-align: initial;
  text-decoration: none;

  // overflow: hidden;
  box-sizing: border-box;

}


// Item: Color
// --------------------------------------------------

:host(.item-color) .item-native {
  background: functions.color-current(base);
  color: functions.color-current(contrast);
}

:host(.item-color) .item-native,
:host(.item-color) .item-inner {
  border-color: functions.color-current(shade);
}


// Item: Activated
// --------------------------------------------------

:host(.bkkr-activated) {
  --transition: none;
}

:host(.bkkr-activated) .item-native {
  color: var(--color-activated);

  &::after {
    background: var(--background-activated);

    opacity: var(--background-activated-opacity);
  }
}

:host(.item-color.bkkr-activated) .item-native {
  color: functions.color-current(contrast);

  &::after {
    background: #000;

    opacity: .12;
  }
}


// Item: Focused
// --------------------------------------------------

:host(.bkkr-focused) .item-native {
  color: var(--color-focused);

  &::after {
    background: var(--background-focused);

    opacity: var(--background-focused-opacity);
  }
}

:host(.item-color.bkkr-focused) .item-native {
  color: functions.color-current(contrast);

  &::after {
    background: functions.color-current(contrast);

    /* background: #000;
    opacity: .15; */
  }
}


// Item: Hover
// --------------------------------------------------

@media (any-hover: hover) {
  :host(.bkkr-activatable:hover) .item-native {
    color: var(--color-hover);

    &::after {
      background: var(--background-hover);

      opacity: var(--background-hover-opacity);
    }
  }

  :host(.item-color.bkkr-activatable:hover) .item-native {
    color: #{functions.color-current(contrast)};

    &::after {
      background: #{functions.color-current(contrast)};
    }
  }
}

// Item: Disabled
// --------------------------------------------------

:host(.item-interactive-disabled:not(.item-multiple-inputs)) {
  pointer-events: none;

  cursor: default;
}

:host(.item-disabled) {
  pointer-events: none;

  cursor: default;
  opacity: .3;
}


// Native Item
// --------------------------------------------------

.item-native {
  @include mixins.border-radius-set(var(--border-radius));
  @include mixins.margin-set(0);
  @include mixins.padding-set(
    var(--padding-top),
    var(--padding-end),
    var(--padding-bottom),
    calc(var(--padding-start) + var(--safe-area-left, 0))
  );
  @include mixins.text-inherit();

  display: flex;
  position: relative;

  align-items: inherit;
  justify-content: inherit;

  width: 100%;
  min-height: var(--min-height);

  transition: var(--transition);

  border-width: var(--border-width);
  border-style: var(--border-style);
  border-color: var(--border-color);

  outline: none;

  background: var(--background);

  overflow: inherit;

  z-index: 1;
  box-sizing: border-box;
}

.item-native::-moz-focus-inner {
  border: 0;
}

.item-native::after {
  @include mixins.state-button();

  transition: var(--transition);

  z-index: -1;
}

button,
a {
  cursor: pointer;
  user-select: none;

  -webkit-user-drag: none;
}


// Item Lines
// --------------------------------------------------

// Default input items have an inset border
:host(.item-interactive) {
  --show-full-highlight: 0;
  --show-inset-highlight: 1;
}

// Full lines - apply the border to the item
// Inset lines - apply the border to the item inner
:host(.item-lines-full) {
  --border-width: #{0 0 $border-bottom-width 0};
  --show-full-highlight: 1;
  --show-inset-highlight: 0;
}

:host(.item-lines-inset) {
  --inner-border-width: #{0 0 $border-bottom-width 0};
  --show-full-highlight: 0;
  --show-inset-highlight: 1;
}

// Full lines - remove the border from the item inner (inset list items)
// Inset lines - remove the border on the item (full list items)
// No lines - remove the border on both (full / inset list items)
:host(.item-lines-inset),
:host(.item-lines-none) {
  --border-width: 0;
  --show-full-highlight: 0;
}

:host(.item-lines-full),
:host(.item-lines-none) {
  --inner-border-width: 0;
  --show-inset-highlight: 0;
}


// Inner Item
// --------------------------------------------------

.item-inner {
  @include mixins.margin-set(0);
  @include mixins.padding-set(
    var(--inner-padding-top),
    calc(var(--safe-area-right, 0) + var(--inner-padding-end)),
    var(--inner-padding-bottom),
    var(--inner-padding-start)
  );

  display: flex;

  // This is required to work with an inset highlight
  position: relative;

  flex: 1;
  flex-direction: inherit;
  align-items: inherit;
  align-self: stretch;

  min-height: inherit;

  border-width: var(--inner-border-width);
  border-style: var(--border-style);
  border-color: var(--border-color);

  box-shadow: var(--inner-box-shadow);
  overflow: inherit;
  box-sizing: border-box;
}

// Item Detail Icon
// --------------------------------------------------

.item-detail-icon {
  color: var(--detail-icon-color);

  font-size: var(--detail-icon-font-size);

  opacity: var(--detail-icon-opacity);
}


// Item Slots
// --------------------------------------------------

::slotted(bkkr-icon) {
  font-size: 1.6em;
}

::slotted(bkkr-button) {
  --margin-top: 0;
  --margin-bottom: 0;
  --margin-start: 0;
  --margin-end: 0;

  z-index: 1;
}

::slotted(bkkr-label) {
  flex: 1;
}

::slotted([slot="start"]) {
  @include mixins.margin-set($slot-start-margin-top, $slot-start-margin-end, $slot-start-margin-bottom, $slot-start-margin-start);
}

::slotted([slot="end"]) {
  @include mixins.margin-set($slot-end-margin-top, $slot-end-margin-end, $slot-end-margin-bottom, $slot-end-margin-start);
}


// Slotted Icon
// --------------------------------------------------

::slotted(bkkr-icon[slot="start"]),
::slotted(bkkr-icon[slot="end"]) {
  @include mixins.margin-set($icon-slot-margin-top, $icon-slot-margin-end, $icon-slot-margin-bottom, $icon-slot-margin-start);
}


// Slotted Toggle
// --------------------------------------------------

::slotted(bkkr-toggle[slot="start"]),
::slotted(bkkr-toggle[slot="end"]) {
  @include mixins.margin-set(0);
}


// Item Input
// --------------------------------------------------

:host(.item-input) {
  align-items: center;
}

.item-content {
  display: flex;

  flex: 1;
  flex-direction: inherit;

  align-items: inherit;
  align-self: stretch;

  text-overflow: ellipsis;

  overflow: inherit;
  box-sizing: border-box;
}


// Item Input Highlight
// --------------------------------------------------

.item-highlight,
.item-inner-highlight {
  @include mixins.position-set(null, 0, 0, 0);

  position: absolute;

  background: var(--highlight-background);

  z-index: 1;
}

.item-highlight {
  height: var(--full-highlight-height);
}

.item-inner-highlight {
  height: var(--inset-highlight-height);
}


// Item Input Focused
// --------------------------------------------------

:host(.item-interactive.item-has-focus),
:host(.item-interactive.bkkr-touched.bkkr-invalid) {
  // If the item has a full border and highlight is enabled, show the full item highlight
  --full-highlight-height: #{calc(var(--highlight-height) * var(--show-full-highlight))};

  // If the item has an inset border and highlight is enabled, show the inset item highlight
  --inset-highlight-height: #{calc(var(--highlight-height) * var(--show-inset-highlight))};
}

// Item Input Focus
// --------------------------------------------------

:host(.item-interactive.item-has-focus) {
  --highlight-background: var(--highlight-color-focused);
}

// Item Input Valid
// --------------------------------------------------

:host(.item-interactive.bkkr-valid) {
  --highlight-background: var(--highlight-color-valid);
}

// Item Input Invalid
// --------------------------------------------------

:host(.item-interactive.bkkr-invalid) {
  --highlight-background: var(--highlight-color-invalid);
}


// Item Select
// --------------------------------------------------

:host(:not(.item-label)) ::slotted(bkkr-select) {
  --padding-start: 0;

  max-width: none;
}

:host(.item-label-floating) ::slotted(bkkr-select) {
  --padding-top: 8px;
  --padding-bottom: 8px;
  --padding-start: 0;

  align-self: stretch;

  width: 100%;

  max-width: 100%;
}


// Item Datetime
// --------------------------------------------------

:host(:not(.item-label)) ::slotted(bkkr-datetime) {
  --padding-start: 0;
}

:host(.item-label-floating) ::slotted(bkkr-datetime) {
  --padding-start: 0;

  width: 100%;
}


// Item w/ Multiple Inputs
// --------------------------------------------------
// Multiple inputs in an item should have the input
// cover relative to themselves instead of the item

:host(.item-multiple-inputs) ::slotted(bkkr-checkbox),
:host(.item-multiple-inputs) ::slotted(bkkr-datetime),
:host(.item-multiple-inputs) ::slotted(bkkr-radio),
:host(.item-multiple-inputs) ::slotted(bkkr-select) {
  position: relative;
}

// Item Textarea
// --------------------------------------------------

:host(.item-textarea) {
  align-items: stretch;
}


// Floating Labels
// --------------------------------------------------

:host(.item-label-floating) {
  align-items: start;

  ::slotted(bkkr-input),
  ::slotted(bkkr-textarea),
  ::slotted(bkkr-select) {
    --placeholder-opacity: 0;
    --placeholder-transition: color .1s ease-in-out;
  }
}

:host(.item-label-floating) .item-content {
  flex: 1;
  flex-direction: column;
}

:host(.item-label-floating) ::slotted([slot="end"]) {
  @include mixins.margin-set($label-slot-end-margin-top, $label-slot-end-margin-end, $label-slot-end-margin-bottom, $label-slot-end-margin-start);
}

:host(.item-label-floating.item-has-focus) ::slotted(bkkr-input),
:host(.item-label-floating.item-has-focus) ::slotted(bkkr-textarea),
:host(.item-label-floating.item-has-focus) ::slotted(bkkr-select) {
  --placeholder-opacity: 0.5;
  --placeholder-transition-delay: .05s;
}


// Item Button
// --------------------------------------------------

::slotted(.button-small) {
  --padding-top: 0;
  --padding-bottom: 0;
  --padding-start: .5em;
  --padding-end: .5em;

  height: 24px;

  font-size: 13px;
}


// Item Shape & Thumbnail
// --------------------------------------------------

::slotted(bkkr-shape) {
  width: $shape-width;
  height: $shape-height;
}

::slotted(bkkr-thumbnail) {
  width: $thumbnail-width;
  height: $thumbnail-height;
}

::slotted(bkkr-bkkr-shape[slot="end"]),
::slotted(bkkr-thumbnail[slot="end"]) {
  @include mixins.margin-set(($padding-end / 2));
}


// Radio / Toggle Item Label
// -----------------------------------------

:host(.item-radio) ::slotted(bkkr-label),
:host(.item-toggle) ::slotted(bkkr-label) {
  @include mixins.margin-set-horizontal(0, null);
}


// Slotted Label
// --------------------------------------------------

::slotted(bkkr-label) {
  @include mixins.margin-set(10px, 8px, 10px, 0);
}

// Fixed Labels
// --------------------------------------------------

:host(.item-label-fixed) ::slotted(bkkr-select),
:host(.item-label-fixed) ::slotted(bkkr-datetime) {
  --padding-start: 0;
}
