@use "../../scss/mixins";
@use "../../scss/functions";
@use "../../scss/globals";

// Toggle
// --------------------------------------------------

@use "toggle.vars" as *;

.toggle {

  /**
   * @prop --background: Background of the toggle
   * @prop --background-checked: Background of the toggle when checked
   * @prop --border-radius: Border radius of the toggle track
   *
   * @prop --handle-background: Background of the toggle handle
   * @prop --handle-background-checked: Background of the toggle handle when checked
   *
   * @prop --handle-border-radius: Border radius of the toggle handle
   * @prop --handle-box-shadow: Box shadow of the toggle handle
   * @prop --handle-height: Height of the toggle handle
   * @prop --handle-max-height: Maximum height of the toggle handle
   * @prop --handle-width: Width of the toggle handle
   * @prop --handle-spacing: Horizontal spacing around the toggle handle
   * @prop --handle-transition: Transition of the toggle handle
   */
  --background: #{$background-color-off};
  --background-checked: #{functions.color-get(globals.$theme-colors, primary, base)};
  --border-radius: #{$border-radius};
  --handle-background: #{$handle-background-color};
  --handle-background-checked: #{$handle-background-color};
  --handle-border-radius: #{$handle-border-radius};
  --handle-box-shadow: #{$handle-box-shadow};
  --handle-height: #{$handle-height};
  --handle-max-height: #{$handle-max-height};
  --handle-width: #{$handle-width};
  --handle-spacing: #{$border-width};
  --handle-transition: #{$transition};

  display: inline-block;
  position: relative;

  width: $width;
  height: $height;

  outline: none;

  contain: strict;
  cursor: pointer;

  overflow: hidden;
  touch-action: none;
  user-select: none;
  z-index: globals.$z-index-item-input;

  /* stylelint-disable-next-line declaration-no-important */
  box-sizing: content-box !important;
}

label {
  @include mixins.hide-cover();

  display: flex;

  align-items: center;

  opacity: 0;
}

input {
  @include mixins.hide-visually();
}


// Toggle Background Track: States
// --------------------------------------------------

:host(.bkkr-focused) input {
  border: 2px solid #5e9ed6;
}

:host(.toggle-disabled) {
  pointer-events: none;

  opacity: $disabled-opacity;
}


// Toggle Background Track: Unchecked
// --------------------------------------------------

.toggle-icon-wrapper {
  display: flex;
  position: relative;

  align-items: center;

  width: 100%;
  height: 100%;

  transition: var(--handle-transition);

  will-change: transform;
}

.toggle-icon {
  @include mixins.border-radius-set(var(--border-radius));
  display: block;
  position: relative;

  width: 100%;
  height: 100%;

  transform: translate3d(0, 0, 0);

  transition: background-color $transition-duration;

  background: var(--background);

  overflow: inherit;

  pointer-events: none;
}

// Toggle Background Track: Checked
// ----------------------------------------------------------

:host(.toggle-checked) .toggle-icon {
  background: var(--background-checked);
}

:host(.toggle-color.toggle-checked) .toggle-icon {
  background: functions.color-current(base);
}

// Toggle Inner Knob: Unchecked
// --------------------------------------------------

.toggle-inner {
  @include mixins.position-set(null, null, null, var(--handle-spacing));
  @include mixins.border-radius-set(var(--handle-border-radius));
  position: absolute;

  width: var(--handle-width);
  height: var(--handle-height);

  max-height: var(--handle-max-height);

  transition: var(--handle-transition);

  background: var(--handle-background);

  box-shadow: var(--handle-box-shadow);

  contain: strict;
  will-change: transform;
}

// Toggle Inner Knob: Checked
// ----------------------------------------------------------

:host(.toggle-checked) .toggle-icon-wrapper {
  @include mixins.direction-ltr() {
    // transform by 100% - handle width
    transform: translate3d(calc(100% - var(--handle-width)), 0, 0);
  }

  @include mixins.direction-rtl() {
    // transform by -100% + handle width
    transform: translate3d(calc(-100% + var(--handle-width)), 0, 0);
  }
}

:host(.toggle-checked) .toggle-inner {
  @include mixins.direction-rtl() {
    // transform by handle spacing amount
    transform: translate3d(calc(var(--handle-spacing) * 2), 0, 0);
  }

  @include mixins.direction-ltr() {
    // transform by handle spacing amount
    transform: translate3d(calc(var(--handle-spacing) * -2), 0, 0);
  }

  background: var(--handle-background-checked);
}

// Toggle Background Oval: Activated or Checked
// ----------------------------------------------------------

:host(.toggle-activated) .toggle-icon::before,
:host(.toggle-checked) .toggle-icon::before {
  transform: scale3d(0, 0, 0);
}

// Toggle Background Oval: Activated and Checked
// ----------------------------------------------------------

:host(.toggle-activated.toggle-checked) .toggle-inner::before {
  transform: scale3d(0, 0, 0);
}

// Toggle Inner Knob: Activated and Unchecked
// ----------------------------------------------------------

:host(.toggle-activated) .toggle-inner {
  width: calc(var(--handle-width) + 6px);
}

// Toggle Inner Knob: Activated and Checked
// ----------------------------------------------------------

// when pressing down on the toggle and it IS checked
// the knob is wider so move it left by 6px in the transform
:host(.toggle-activated.toggle-checked) .toggle-icon-wrapper {
  @include mixins.direction-ltr() {
    // transform by 100% - handle width - 6px (width addition on activated)
    transform: translate3d(calc(100% - var(--handle-width) - 6px), 0, 0);
  }

  @include mixins.direction-rtl() {
    // transform by -100% + handle width + 6px (width addition on activated)
    transform: translate3d(calc(-100% + var(--handle-width) + 6px), 0, 0);
  }
}

// Toggle Within An Item
// ----------------------------------------------------------

:host(.in-item[slot]) {
  @include mixins.margin-set($media-margin);
  @include mixins.padding-set(
    $item-end-padding-top,
    $item-end-padding-end,
    $item-end-padding-bottom,
    $item-end-padding-start
  );
}

:host(.in-item[slot="start"]) {
  @include mixins.padding-set(
    $item-start-padding-top,
    $item-start-padding-end,
    $item-start-padding-bottom,
    $item-start-padding-start
  );
}
