import{r as o,c as t,h as n,H as s,g as i}from"./p-e501253c.js";const r=class{constructor(n){o(this,n),this.bkkrChange=t(this,"bkkrChange",7),this.animated=!0,this.disabled=!1,this.readonly=!1,this.expand="accordion"}valueChanged(){const{value:o,multiple:t}=this;!t&&Array.isArray(o)?this.value=o[0]:this.bkkrChange.emit({value:this.value})}async disabledChanged(){const{disabled:o}=this,t=await this.getAccordions();for(const n of t)n.disabled=o}async readonlyChanged(){const{readonly:o}=this,t=await this.getAccordions();for(const n of t)n.readonly=o}async onKeydown(o){const t=document.activeElement;if(!t)return;const n="BKKR-ACCORDION"===t.tagName?t:t.closest("bkkr-accordion");if(!n)return;if(n.closest("bkkr-accordion-group")!==this.el)return;const s=await this.getAccordions(),i=s.findIndex((o=>o===n));if(-1===i)return;let r;"ArrowDown"===o.key?r=this.findNextAccordion(s,i):"ArrowUp"===o.key?r=this.findPreviousAccordion(s,i):"Home"===o.key?r=s[0]:"End"===o.key&&(r=s[s.length-1]),void 0!==r&&r!==t&&(o.preventDefault(),r.focus())}async componentDidLoad(){this.disabled&&this.disabledChanged(),this.readonly&&this.readonlyChanged()}async requestAccordionToggle(o,t){const{multiple:n,value:s,readonly:i,disabled:r}=this;if(!i&&!r)if(t)if(n){const t=s||[];void 0===t.find((t=>t===o))&&void 0!==o&&(this.value=[...t,o])}else this.value=o;else this.value=n?(s||[]).filter((t=>t!==o)):void 0}findNextAccordion(o,t){const n=o[t+1];return void 0===n?o[0]:n}findPreviousAccordion(o,t){const n=o[t-1];return void 0===n?o[o.length-1]:n}async getAccordions(){return Array.from(this.el.querySelectorAll("bkkr-accordion"))}render(){const{disabled:o,readonly:t,expand:i}=this;return n(s,{class:{"accordion-group-disabled":o,"accordion-group-readonly":t,[`accordion-group-expand-${i}`]:!0},role:"presentation"},n("slot",null))}get el(){return i(this)}static get watchers(){return{value:["valueChanged"],disabled:["disabledChanged"],readonly:["readonlyChanged"]}}};r.style=":host{display:block}:host(.accordion-group-expand-inset) ::slotted(bkkr-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(bkkr-accordion.accordion-expanded){border-bottom:none}";export{r as bkkr_accordion_group}