@use "../../scss/mixins";
@use "../../scss/functions";
@use "../../scss/globals";


// Modal
// --------------------------------------------------

@use "modal.vars" as *;

:host {
  /**
   * @prop --background: Background of the modal content
   *
   * @prop --border-color: Border color of the modal content
   * @prop --border-radius: Border radius of the modal content
   * @prop --border-width: Border width of the modal content
   * @prop --border-style: Border style of the modal content
   *
   * @prop --min-width: Minimum width of the modal
   * @prop --width: Width of the modal
   * @prop --max-width: Maximum width of the modal
   *
   * @prop --min-height: Minimum height of the modal
   * @prop --height: Height of the modal
   * @prop --max-height: Maximum height of the modal
   *
   * @prop --backdrop-opacity: Opacity of the backdrop
   */
  --width: 100%;
  --min-width: auto;
  --max-width: auto;
  --height: 100%;
  --min-height: auto;
  --max-height: auto;
  --overflow: hidden;
  --border-radius: 0;
  --border-width: 0;
  --border-style: none;
  --border-color: transparent;
  --background: #{$background-color};
  --box-shadow: none;
  --backdrop-opacity: .4;

  @include mixins.position-set(0, 0, 0, 0);
  display: flex;

  position: absolute;

  align-items: center;
  justify-content: center;

  outline: none;

  contain: strict;
}

// Shell div to position the modal with bottom padding
.modal-shadow,
.modal-wrapper {
  @include mixins.border-radius-set(var(--border-radius));
  display: flex;

  flex-direction: column;
  justify-content: space-between;

  width: var(--width);
  min-width: var(--min-width);
  max-width: var(--max-width);

  height: var(--height);
  min-height: var(--min-height);
  max-height: var(--max-height);

  // hidden by default to prevent flickers, the animation will show it
  transform: translate3d(0, 100%, 0);

  border-width: var(--border-width);
  border-style: var(--border-style);
  border-color: var(--border-color);

  background: var(--background);

  box-shadow: var(--box-shadow);

  overflow: var(--overflow);
  z-index: globals.$z-index-modal;
}

.modal-shadow {
  position: absolute;
  pointer-events: none;

  background: transparent;
}


// Sizes

@media only screen and (min-width: $modal-inset-min-width) and (min-height: $modal-inset-min-height-small) {
  :host {
    --width: #{$modal-inset-width};
    --height: #{$modal-inset-height-small};
    --safe-area-top: 0;
    --safe-area-bottom: 0;
    --safe-area-right: 0;
    --safe-area-left: 0;
  }
}

@media only screen and (min-width: $modal-inset-min-width) and (min-height: $modal-inset-min-height-large) {
  :host {
    --width: #{$modal-inset-width};
    --height: #{$modal-inset-height-large};
  }
}


// Small screens

@media screen and (max-width: 767px) {
  @supports (width: max(0, 1px)) {
    :host(.modal-card) {
      --height: calc(100% - max(30px, var(--safe-area-top)) - 10px);
    }
  }

  @supports not (width: max(0, 1px)) {
    :host(.modal-card) {
      --height: calc(100% - 40px);
    }
  }

  :host(.modal-card) .modal-wrapper {
    @include mixins.border-radius-set(#{$border-radius}, "top");
  }

  :host(.modal-card) {
    --backdrop-opacity: 0;
    --width: 100%;

    align-items: flex-end;
  }

  :host(.modal-card) .modal-shadow {
    display: none;
  }

  :host(.modal-card) bkkr-backdrop {
    pointer-events: none;
  }
}


// Large screens

@media screen and (min-width: 768px) {
  .modal-card {
    --width: calc(100% - 120px);
    --height: calc(100% - (120px + var(--safe-area-top) + var(--safe-area-bottom)));
    --max-width: 720px;
    --max-height: 1000px;
    --backdrop-opacity: 0;
    --border-radius: #{$border-radius};

    transition: all .5s ease-in-out;

    &:first-of-type {
      --backdrop-opacity: .18;
    }
  }

  .modal-card .modal-shadow {
    box-shadow: 0 0 30px 10px rgba(0, 0, 0, .1);
  }
}
